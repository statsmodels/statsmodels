import numpy as np

class Bunch(dict):
    def __init__(self, **kw):
        dict.__init__(self, kw)
        self.__dict__  = self

        for i,att in enumerate(['params', 'bse', 'tvalues', 'pvalues']):
            self[att] = self.params_table[:,i]

est = dict(
           k_autoCns = 0,
           df_m = 4,
           F = 177.2069138358522,
           N = 48,
           df_r = 42,
           rmse = .5402337199841413,
           ll = -35.3481320936035,
           rank = 5,
           cmdline = "cnsreg g y y2 ne nc s w, constraints(1) collinear",
           cmd = "cnsreg",
           title = "Constrained linear regression",
           predict = "tobit_p",
           depvar = "g",
           vce = "ols",
           properties = "b V",
          )

params_table = np.array([
     .00077782104075,  .00002982919683,  26.075829165117,  1.444567628e-27,
     .00071762328441,  .00083801879709,               42,  2.0180817028184,
                   0, -1.332484237e-08,  7.953896591e-10, -16.752596939807,
     3.322252167e-20, -1.493000369e-08, -1.171968105e-08,               42,
     2.0180817028184,                0, -.78736446311874,  .13511976179342,
    -5.8271599406939,  7.039264333e-07, -1.0600471820832, -.51468174415425,
                  42,  2.0180817028184,                0, -.03929091159991,
     .13511441442431, -.29079733474271,  .77263751123567, -.31196283913664,
     .23338101593681,               42,  2.0180817028184,                0,
     .42968271095392,  .13516700117137,  3.1789024483067,  .00277475959346,
     .15690465906515,   .7024607628427,               42,  2.0180817028184,
                   0,  .39697266376473,   .1350823781206,  2.9387450035143,
     .00533445146144,  .12436538810635,  .66957993942311,               42,
     2.0180817028184,                0,  1.0452359254769,    .197874358827,
     5.2823212248067,  4.238198802e-06,  .64590930247116,  1.4445625484825,
                  42,  2.0180817028184,                0]).reshape(7,9)

params_table_colnames = 'b se t pvalue ll ul df crit eform'.split()

params_table_rownames = 'y y2 ne nc s w _cons'.split()

cov = np.array([
     8.897809837e-10, -2.275429869e-14, -1.015924134e-07, -9.932218333e-08,
     1.378780238e-07,  6.303657299e-08, -5.230529223e-06, -2.275429869e-14,
     6.326447098e-19,  3.100292429e-12,  2.992685453e-12, -4.162073752e-12,
    -1.930904130e-12,  1.228935449e-10, -1.015924134e-07,  3.100292429e-12,
     .01825735002711, -.00606443893002,  -.0061022980568,  -.0060906130403,
     .00048966177719, -9.932218333e-08,  2.992685453e-12, -.00606443893002,
     .01825590498522, -.00610132518283, -.00609014087238,  .00048692572542,
     1.378780238e-07, -4.162073752e-12,  -.0061022980568, -.00610132518283,
     .01827011820566, -.00606649496604, -.00067430537972,  6.303657299e-08,
    -1.930904130e-12,  -.0060906130403, -.00609014087238, -.00606649496604,
     .01824724887872, -.00030228212289, -5.230529223e-06,  1.228935449e-10,
     .00048966177719,  .00048692572542, -.00067430537972, -.00030228212289,
     .03915426188119]).reshape(7,7)

cov_colnames = 'y y2 ne nc s w _cons'.split()

cov_rownames = 'y y2 ne nc s w _cons'.split()

cov_prior = np.array([
    np.nan])

cov_prior_colnames = 'c1'.split()

cov_prior_rownames = 'r1'.split()



results_rls1_nonrobust = Bunch(
                params_table=params_table,
                params_table_colnames=params_table_colnames,
                params_table_rownames=params_table_rownames,
                cov=cov,
                cov_colnames=cov_colnames,
                cov_rownames=cov_rownames,
                cov_prior=cov_prior,
                cov_prior_colnames=cov_prior_colnames,
                cov_prior_rownames=cov_prior_rownames,
                **est
                )

est = dict(
           k_autoCns = 0,
           N = 48,
           df_r = 42,
           rmse = .5402337199841413,
           ll = -35.3481320936035,
           df_m = 4,
           F = 192.1779978399202,
           p = 2.10103620448e-26,
           rank = 5,
           cmdline = "cnsreg g y y2 ne nc s w, constraints(1) collinear vce(robust)",
           vcetype = "Robust",
           vce = "robust",
           cmd = "cnsreg",
           title = "Constrained linear regression",
           predict = "tobit_p",
           depvar = "g",
           properties = "b V",
          )

params_table = np.array([
     .00077782104075,   .0000291968408,  26.640589168508,  6.175579194e-28,
     .00071889943055,  .00083674265094,               42,  2.0180817028184,
                   0, -1.332484237e-08,  7.629085113e-10, -17.465845736633,
     7.148947315e-21, -1.486445408e-08, -1.178523066e-08,               42,
     2.0180817028184,                0, -.78736446311874,  .13412483888896,
    -5.8703851549122,  6.101078213e-07,  -1.058039346374, -.51668957986346,
                  42,  2.0180817028184,                0, -.03929091159991,
     .13317924792223, -.29502277729377,  .76942996766333, -.30805751502688,
     .22947569182705,               42,  2.0180817028184,                0,
     .42968271095392,  .13566427633073,  3.1672502339998,  .00286581183433,
     .15590111716477,  .70346430474308,               42,  2.0180817028184,
                   0,  .39697266376473,   .1403986696169,  2.8274674172336,
     .00715775405295,  .11363667751081,  .68030865001865,               42,
     2.0180817028184,                0,  1.0452359254769,  .19062731162579,
     5.4831383633457,  2.191468082e-06,  .66053443582737,  1.4299374151263,
                  42,  2.0180817028184,                0]).reshape(7,9)

params_table_colnames = 'b se t pvalue ll ul df crit eform'.split()

params_table_rownames = 'y y2 ne nc s w _cons'.split()

cov = np.array([
     8.524555126e-10, -2.111855037e-14, -1.072504037e-06, -2.113897509e-09,
     1.428957348e-06, -3.543394135e-07, -4.947249618e-06, -2.111855037e-14,
     5.820293966e-19,  3.153951667e-11,  4.238099859e-12, -4.005098227e-11,
     4.273365740e-12,  1.125295047e-10, -1.072504037e-06,  3.153951667e-11,
     .01798947240699, -.00533315373311, -.00602451351965, -.00663180515423,
     .00514612866032, -2.113897509e-09,  4.238099859e-12, -.00533315373311,
     .01773671207713, -.00585192971038, -.00655162863365, -.00116504725094,
     1.428957348e-06, -4.005098227e-11, -.00602451351965, -.00585192971038,
     .01840479587234, -.00652835264232, -.00782045261064, -3.543394135e-07,
     4.273365740e-12, -.00663180515423, -.00655162863365, -.00652835264232,
      .0197117864302,  .00383937120127, -4.947249618e-06,  1.125295047e-10,
     .00514612866032, -.00116504725094, -.00782045261064,  .00383937120127,
     .03633877193768]).reshape(7,7)

cov_colnames = 'y y2 ne nc s w _cons'.split()

cov_rownames = 'y y2 ne nc s w _cons'.split()

cov_prior = np.array([
    np.nan])

cov_prior_colnames = 'c1'.split()

cov_prior_rownames = 'r1'.split()


results_rls1_robust = Bunch(
                params_table=params_table,
                params_table_colnames=params_table_colnames,
                params_table_rownames=params_table_rownames,
                cov=cov,
                cov_colnames=cov_colnames,
                cov_rownames=cov_rownames,
                cov_prior=cov_prior,
                cov_prior_colnames=cov_prior_colnames,
                cov_prior_rownames=cov_prior_rownames,
                **est
                )

est = dict(
           k_autoCns = 0,
           df_m = 5,
           F = 313.1665054105897,
           N = 48,
           df_r = 42,
           rmse = .5402337199841313,
           ll = -35.3481320936026,
           rank = 6,
           cmdline = "cnsreg g ystd ystd2 ne nc s w, constraints(1) collinear",
           cmd = "cnsreg",
           title = "Constrained linear regression",
           predict = "tobit_p",
           depvar = "g",
           vce = "ols",
           properties = "b V",
          )

params_table = np.array([
     4.4331111243949,  .12605014389633,  35.169425336324,  8.697531669e-33,
     4.1787316353601,  4.6874906134297,               42,  2.0180817028184,
                   0, -1.1594401399663,  .06920957652907, -16.752596939807,
     3.322252167e-20, -1.2991107200195, -1.0197695599132,               42,
     2.0180817028184,                0, -.78736446311874,  .13511976179342,
     -5.827159940694,  7.039264333e-07, -1.0600471820832, -.51468174415425,
                  42,  2.0180817028184,                0, -.03929091159991,
     .13511441442431, -.29079733474273,  .77263751123565, -.31196283913663,
     .23338101593681,               42,  2.0180817028184,                0,
     .42968271095392,  .13516700117136,  3.1789024483067,  .00277475959346,
     .15690465906516,  .70246076284269,               42,  2.0180817028184,
                   0,  .39697266376473,  .13508237812059,  2.9387450035143,
     .00533445146144,  .12436538810636,   .6695799394231,               42,
     2.0180817028184,                0,   8.158826803717,  .10330886895099,
     78.975085939498,  2.639752395e-47,  7.9503410655482,  8.3673125418859,
                  42,  2.0180817028184,                0]).reshape(7,9)

params_table_colnames = 'b se t pvalue ll ul df crit eform'.split()

params_table_rownames = 'ystd ystd2 ne nc s w _cons'.split()

cov = np.array([
     .01588863877629, -.00680853617053, -.00029095728981, -.00029257376661,
     .00040452555587,  .00017900550055,  .00666669166697, -.00680853617053,
     .00478996548333,  .00026976705525,  .00026040380404, -.00036215628221,
    -.00016801457708, -.00469017453576, -.00029095728981,  .00026976705525,
     .01825735002711, -.00606443893002, -.00610229805679,  -.0060906130403,
    -.00026414690826, -.00029257376661,  .00026040380404, -.00606443893002,
     .01825590498522, -.00610132518283, -.00609014087238, -.00025497872479,
     .00040452555587, -.00036215628221, -.00610229805679, -.00610132518283,
     .01827011820566, -.00606649496604,  .00035461135966,  .00017900550055,
    -.00016801457708,  -.0060906130403, -.00609014087238, -.00606649496604,
     .01824724887872,  .00016451427339,  .00666669166697, -.00469017453576,
    -.00026414690826, -.00025497872479,  .00035461135966,  .00016451427339,
     .01067272240393]).reshape(7,7)

cov_colnames = 'ystd ystd2 ne nc s w _cons'.split()

cov_rownames = 'ystd ystd2 ne nc s w _cons'.split()

cov_prior = np.array([
    np.nan])

cov_prior_colnames = 'c1'.split()

cov_prior_rownames = 'r1'.split()


results_rls2_nonrobust = Bunch(
                params_table=params_table,
                params_table_colnames=params_table_colnames,
                params_table_rownames=params_table_rownames,
                cov=cov,
                cov_colnames=cov_colnames,
                cov_rownames=cov_rownames,
                cov_prior=cov_prior,
                cov_prior_colnames=cov_prior_colnames,
                cov_prior_rownames=cov_prior_rownames,
                **est
                )

est = dict(
           k_autoCns = 0,
           N = 48,
           df_r = 42,
           rmse = .5402337199841313,
           ll = -35.3481320936026,
           df_m = 5,
           F = 276.5870930339801,
           p = 5.46053641375e-31,
           rank = 6,
           cmdline = "cnsreg g ystd ystd2 ne nc s w, constraints(1) collinear vce(robust)",
           vcetype = "Robust",
           vce = "robust",
           cmd = "cnsreg",
           title = "Constrained linear regression",
           predict = "tobit_p",
           depvar = "g",
           properties = "b V",
          )

params_table = np.array([
     4.4331111243949,  .12974557566928,  34.167724807009,  2.812321219e-32,
     4.1712739521151,  4.6949482966747,               42,  2.0180817028184,
                   0, -1.1594401399663,  .06638328068674, -17.465845736634,
     7.148947315e-21, -1.2934070240933, -1.0254732558393,               42,
     2.0180817028184,                0, -.78736446311874,  .13412483888896,
    -5.8703851549121,  6.101078213e-07,  -1.058039346374, -.51668957986346,
                  42,  2.0180817028184,                0, -.03929091159991,
     .13317924792223, -.29502277729378,  .76942996766332, -.30805751502688,
     .22947569182705,               42,  2.0180817028184,                0,
     .42968271095392,  .13566427633073,  3.1672502339998,  .00286581183433,
     .15590111716477,  .70346430474308,               42,  2.0180817028184,
                   0,  .39697266376473,   .1403986696169,  2.8274674172336,
     .00715775405295,  .11363667751081,  .68030865001865,               42,
     2.0180817028184,                0,   8.158826803717,  .10369823552546,
     78.678549951929,  3.088381049e-47,  7.9495552919885,  8.3680983154455,
                  42,  2.0180817028184,                0]).reshape(7,9)

params_table_colnames = 'b se t pvalue ll ul df crit eform'.split()

params_table_rownames = 'ystd ystd2 ne nc s w _cons'.split()

cov = np.array([
     .01683391440575, -.00641375279447, -.00332369431549,  .00087799951286,
     .00484581956427, -.00240012476164,  .00767951974205, -.00641375279447,
     .00440673995474,  .00274436129242,  .00036877157404, -.00348497304545,
     .00037184017898, -.00454371199197, -.00332369431549,  .00274436129242,
     .01798947240699, -.00533315373311, -.00602451351965, -.00663180515423,
    -.00296518879978,  .00087799951286,  .00036877157404, -.00533315373311,
     .01773671207713, -.00585192971038, -.00655162863365, -.00064270878055,
     .00484581956427, -.00348497304545, -.00602451351965, -.00585192971038,
     .01840479587234, -.00652835264232,  .00324078088989, -.00240012476164,
     .00037184017898, -.00663180515423, -.00655162863365, -.00652835264232,
      .0197117864302,  .00036711669044,  .00767951974205, -.00454371199197,
    -.00296518879978, -.00064270878055,  .00324078088989,  .00036711669044,
     .01075332405109]).reshape(7,7)

cov_colnames = 'ystd ystd2 ne nc s w _cons'.split()

cov_rownames = 'ystd ystd2 ne nc s w _cons'.split()

cov_prior = np.array([
    np.nan])

cov_prior_colnames = 'c1'.split()

cov_prior_rownames = 'r1'.split()


results_rls2_robust = Bunch(
                params_table=params_table,
                params_table_colnames=params_table_colnames,
                params_table_rownames=params_table_rownames,
                cov=cov,
                cov_colnames=cov_colnames,
                cov_rownames=cov_rownames,
                cov_prior=cov_prior,
                cov_prior_colnames=cov_prior_colnames,
                cov_prior_rownames=cov_prior_rownames,
                **est
                )

est = dict(
           k_autoCns = 0,
           N = 48,
           df_r = 42,
           rmse = .5402337199841313,
           ll = -35.3481320936026,
           N_clust = 4,
           df_m = 2,
           F = 8861.643983408047,
           p = 7.03425025517e-56,
           rank = 2,
           cmdline = "cnsreg g ystd ystd2 ne nc s w, constraints(1) collinear vce(cluster groups)",
           vcetype = "Robust",
           vce = "cluster",
           clustvar = "groups",
           cmd = "cnsreg",
           title = "Constrained linear regression",
           predict = "tobit_p",
           depvar = "g",
           properties = "b V",
          )

params_table = np.array([
     4.4331111243949,  .08405294509814,  52.741889284415,  5.150614185e-40,
     4.2634854138244,  4.6027368349655,               42,  2.0180817028184,
                   0, -1.1594401399663,  .02170209972078, -53.425251698382,
     3.022817287e-40, -1.2032367503256, -1.1156435296071,               42,
     2.0180817028184,                0, -.78736446311874,  .00269555162551,
    -292.09771227049,  4.162907544e-71, -.79280430653319,  -.7819246197043,
                  42,  2.0180817028184,                0, -.03929091159991,
     .00240675826038, -16.325242234224,  8.539688705e-20, -.04414794640829,
    -.03443387679153,               42,  2.0180817028184,                0,
     .42968271095392,  .00338660392868,  126.87716662543,  6.466003001e-56,
     .42284826753075,  .43651715437709,               42,  2.0180817028184,
                   0,  .39697266376473,  .00171573658566,  231.37156780447,
     7.378296343e-67,  .39351016715434,  .40043516037512,               42,
     2.0180817028184,                0,   8.158826803717,  .02124997264327,
     383.94528504495,  4.306400477e-76,  8.1159426227403,  8.2017109846938,
                  42,  2.0180817028184,                0]).reshape(7,9)

params_table_colnames = 'b se t pvalue ll ul df crit eform'.split()

params_table_rownames = 'ystd ystd2 ne nc s w _cons'.split()

cov = np.array([
     .00706489757967,  .00124407724592,   .0002016126796,  .00017795332398,
    -.00025086055729, -.00012870544629, -.00121815896997,  .00124407724592,
     .00047098113229,  .00005502222394,   .0000495030806, -.00006957686314,
     -.0000349484414, -.00046116902537,   .0002016126796,  .00005502222394,
     7.265998566e-06,  6.485993045e-06, -9.127212104e-06, -4.624779506e-06,
    -.00005387592761,  .00017795332398,   .0000495030806,  6.485993045e-06,
     5.792485324e-06, -8.150689954e-06, -4.127788414e-06, -.00004847176642,
    -.00025086055729, -.00006957686314, -9.127212104e-06, -8.150689954e-06,
     .00001146908617,  5.808815889e-06,  .00006812734516, -.00012870544629,
     -.0000349484414, -4.624779506e-06, -4.127788414e-06,  5.808815889e-06,
     2.943752031e-06,  .00003422034887, -.00121815896997, -.00046116902537,
    -.00005387592761, -.00004847176642,  .00006812734516,  .00003422034887,
     .00045156133734]).reshape(7,7)

cov_colnames = 'ystd ystd2 ne nc s w _cons'.split()

cov_rownames = 'ystd ystd2 ne nc s w _cons'.split()

cov_prior = np.array([
    np.nan])

cov_prior_colnames = 'c1'.split()

cov_prior_rownames = 'r1'.split()


results_rls2_cluster = Bunch(
                params_table=params_table,
                params_table_colnames=params_table_colnames,
                params_table_rownames=params_table_rownames,
                cov=cov,
                cov_colnames=cov_colnames,
                cov_rownames=cov_rownames,
                cov_prior=cov_prior,
                cov_prior_colnames=cov_prior_colnames,
                cov_prior_rownames=cov_prior_rownames,
                **est
                )

est = dict(
           k_autoCns = 0,
           N = 48,
           df_r = 43,
           rmse = 1.329204573612821,
           ll = -79.12890163037872,
           df_m = 4,
           F = 85.49291933454151,
           p = 6.85515404356e-20,
           rank = 5,
           cmdline = "cnsreg g ystd ne nc s w [pweight=ystd2], constraints(1) collinear",
           wexp = "= ystd2",
           wtype = "pweight",
           vcetype = "Robust",
           vce = "robust",
           cmd = "cnsreg",
           title = "Constrained linear regression",
           predict = "tobit_p",
           depvar = "g",
           properties = "b V",
          )

params_table = np.array([
     2.3943448649687,  .14697740383569,  16.290564416592,  5.222545756e-20,
     2.0979366811906,  2.6907530487469,               43,  2.0166921992278,
                   0,  .01597955091491,  .36823530481604,  .04339494531327,
     .96558759611352, -.72663771578789,   .7585968176177,               43,
     2.0166921992278,                0,  .59488702597085,   .3577062413658,
     1.6630602354028,  .10357348218747, -.12649636060667,  1.3162704125484,
                  43,  2.0166921992278,                0,  -.3752900667072,
     .45767646536629, -.81998987299215,  .41674417510865, -1.2982826241816,
     .54770249076715,               43,  2.0166921992278,                0,
    -.23557651017856,  .48641562518891, -.48431114869524,  .63062283135595,
    -1.2165271070796,  .74537408672244,               43,  2.0166921992278,
                   0,  6.1271122235771,  .31524890695896,  19.435792125918,
     6.427641062e-23,  5.4913522120978,  6.7628722350563,               43,
     2.0166921992278,                0]).reshape(6,9)

params_table_colnames = 'b se t pvalue ll ul df crit eform'.split()

params_table_rownames = 'ystd ne nc s w _cons'.split()

cov = np.array([
     .02160235723828, -.01245615882656, -.01511559654981,  .01192692549466,
      .0156448298817, -.02879197241236, -.01245615882656,  .13559723971296,
    -.02163166622158, -.05028882972093, -.06367674377045, -.00319998195848,
    -.01511559654981, -.02163166622158,  .12795375511205, -.04628879473113,
    -.06003329415934, -.00296287056793,  .01192692549466, -.05028882972093,
    -.04628879473113,  .20946774695018, -.11289012249812, -.00037455905235,
      .0156448298817, -.06367674377045, -.06003329415934, -.11289012249812,
     .23660016042792,  .00653741157876, -.02879197241236, -.00319998195848,
    -.00296287056793, -.00037455905235,  .00653741157876,  .09938187333882
    ]).reshape(6,6)

cov_colnames = 'ystd ne nc s w _cons'.split()

cov_rownames = 'ystd ne nc s w _cons'.split()

cov_prior = np.array([
    np.nan])

cov_prior_colnames = 'c1'.split()

cov_prior_rownames = 'r1'.split()


results_rls3_weights = Bunch(
                params_table=params_table,
                params_table_colnames=params_table_colnames,
                params_table_rownames=params_table_rownames,
                cov=cov,
                cov_colnames=cov_colnames,
                cov_rownames=cov_rownames,
                cov_prior=cov_prior,
                cov_prior_colnames=cov_prior_colnames,
                cov_prior_rownames=cov_prior_rownames,
                **est
                )

