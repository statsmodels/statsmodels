#MODEL : FUNCTION EXPRESSION : JACOBIAN

#LOWER

Misra1a : b1*(1-np.exp(-b2*x)) : np.column_stack([1-np.exp(-b2*x),b1*x*np.exp(-b2*x)])

Misra1b : b1*(1-(1+b2*x/2)**(-2)) : np.column_stack([1-(1+b2*x/2)**(-2),b1*x*(1+b2*x/2)**(-3)])

Chwirut1 : np.exp(-b1*x)/(b2+b3*x) : np.column_stack([(-x)*np.exp(-b1*x)/(b2+b3*x),(-1)*np.exp(-b1*x)/(b2+b3*x)**2,(-x)*np.exp(-b1*x)/(b2+b3*x)**2])

Chwirut2 : np.exp(-b1*x)/(b2+b3*x) : np.column_stack([(-x)*np.exp(-b1*x)/(b2+b3*x),(-1)*np.exp(-b1*x)/(b2+b3*x)**2,(-x)*np.exp(-b1*x)/(b2+b3*x)**2])

Gauss1 : b1*np.exp(-b2*x) + b3*np.exp(-(x-b4)**2/b5**2) + b6*np.exp(-(x-b7)**2/b8**2) : np.column_stack([np.exp(-b2*x),-b1*x*np.exp(-b2*x),np.exp(-(x-b4)**2/b5**2),(2*(x-b4)/b5**2)*b3*np.exp(-(x-b4)**2/b5**2),(2*(x-b4)**2/b5**3)*b3*np.exp(-(x-b4)**2/b5**2),np.exp(-(x-b7)**2/b8**2),(2*(x-b7)/b8**2)*b6*np.exp(-(x-b7)**2/b8**2),(2*(x-b7)**2/b8**3)*b6*np.exp(-(x-b7)**2/b8**2)])

Gauss2 : b1*np.exp(-b2*x) + b3*np.exp(-(x-b4)**2/b5**2)+b6*np.exp(-(x-b7)**2/b8**2) : np.column_stack([np.exp(-b2*x),-b1*x*np.exp(-b2*x),np.exp(-(x-b4)**2/b5**2),(2*(x-b4)/b5**2)*b3*np.exp(-(x-b4)**2/b5**2),(2*(x-b4)**2/b5**3)*b3*np.exp(-(x-b4)**2/b5**2),np.exp(-(x-b7)**2/b8**2),(2*(x-b7)/b8**2)*b6*np.exp(-(x-b7)**2/b8**2),(2*(x-b7)**2/b8**3)*b6*np.exp(-(x-b7)**2/b8**2)])

DanWood : b1*x**b2 : np.column_stack([x**b2,b1*np.log(x)*x**b2])

Lanczos3 : b1*np.exp(-b2*x) + b3*np.exp(-b4*x) + b5*np.exp(-b6*x) : np.column_stack([np.exp(-b2*x),-b1*x*np.exp(-b2*x),np.exp(-b4*x),-b3*x*np.exp(-b4*x),np.exp(-b6*x),-b5*x*np.exp(-b6*x)])


#AVERAGE

Misra1c : b1*(1-(1+2*b2*x)**(-.5)) : np.column_stack([(1-(1+2*b2*x)**(-.5)),b1*x*(1+2*b2*x)**(-1.5)])

Misra1d : b1*b2*x*((1+b2*x)**(-1)) : np.column_stack([b2*x*((1+b2*x)**(-1)),b1*x*((1+b2*x)**(-1))-b1*b2*(x**2)*((1+b2*x)**(-2))])

Kirby2 : (b1 + b2*x + b3*x**2)/(1 + b4*x + b5*x**2) : np.column_stack([1/(1 + b4*x + b5*x**2),x/(1 + b4*x + b5*x**2),x**2/(1 + b4*x + b5*x**2),(b1 + b2*x + b3*x**2)/(1 + b4*x + b5*x**2)**2*(-1)*x, (b1 + b2*x + b3*x**2)/(1 + b4*x + b5*x**2)**2*(-1)*x**2])

Hahn1 : (b1+b2*x+b3*x**2+b4*x**3)/(1+b5*x+b6*x**2+b7*x**3) : np.column_stack([1/(1+b5*x+b6*x**2+b7*x**3), x/(1+b5*x+b6*x**2+b7*x**3),x**2/(1+b5*x+b6*x**2+b7*x**3), x**3/(1+b5*x+b6*x**2+b7*x**3),(b1+b2*x+b3*x**2+b4*x**3)/(1+b5*x+b6*x**2+b7*x**3)**2*(-1)*x,(b1+b2*x+b3*x**2+b4*x**3)/(1+b5*x+b6*x**2+b7*x**3)**2*(-1)*x**2,(b1+b2*x+b3*x**2+b4*x**3)/(1+b5*x+b6*x**2+b7*x**3)**2*(-1)*x**3])

MGH17 : b1 + b2*np.exp(-x*b4) + b3*np.exp(-x*b5) : np.column_stack([np.ones(33),np.exp(-x*b4),np.exp(-x*b5),(-x)*b2*np.exp(-x*b4),(-x)*b3*np.exp(-x*b5)])

Lanczos1 : b1*np.exp(-b2*x) + b3*np.exp(-b4*x) + b5*np.exp(-b6*x) : np.column_stack([np.exp(-b2*x),(-x)*b1*np.exp(-b2*x),np.exp(-b4*x),(-x)*b3*np.exp(-b4*x),np.exp(-b6*x),(-x)*b5*np.exp(-b6*x)])

Lanczos2 : b1*np.exp(-b2*x) + b3*np.exp(-b4*x) + b5*np.exp(-b6*x) : np.column_stack([np.exp(-b2*x),(-x)*b1*np.exp(-b2*x),np.exp(-b4*x),(-x)*b3*np.exp(-b4*x),np.exp(-b6*x),(-x)*b5*np.exp(-b6*x)])

Gauss3 : b1*np.exp(-b2*x) + b3*np.exp(-(x-b4)**2/b5**2) + b6*np.exp(-(x-b7)**2/b8**2) : np.column_stack([np.exp(-b2*x),(-b2)*b1*np.exp(-b2*x), np.exp(-(x-b4)**2/b5**2), b3*np.exp(-(x-b4)**2/b5**2)*(2*(x-b4)/b5**2),b3*np.exp(-(x-b4)**2/b5**2)*(2*(x-b4)**2/b5**3), np.exp(-(x-b7)**2/b8**2),b6*np.exp(-(x-b7)**2/b8**2)*(2*(x-b7)/b8**2),b6*np.exp(-(x-b7)**2/b8**2)*(2*(x-b7)**2/b8**3)])

Roszman1 : b1 - b2*x - np.arctan(b3/(x-b4))/np.pi : np.column_stack([np.ones(25),-x,1/(np.pi*(x-b4)*(1+(b3/(x-b4))**2)),b3/(np.pi*(x-b4)**2*(1+(b3/(x-b4))**2))])

ENSO : b1 + b2*np.cos( 2*np.pi*x/12 ) + b3*np.sin( 2*np.pi*x/12 ) + b5*np.cos( 2*np.pi*x/b4 ) + b6*np.sin( 2*np.pi*x/b4 ) + b8*np.cos( 2*np.pi*x/b7 ) + b9*np.sin( 2*np.pi*x/b7 ) : np.column_stack([np.ones(168),np.cos( 2*np.pi*x/12 ),np.sin( 2*np.pi*x/12 ),b5*np.cos( 2*np.pi*x/b4 )*(-2*np.pi*x/b4**2) + b6*np.sin( 2*np.pi*x/b4 )*(-2*np.pi*x/b4**2),np.cos( 2*np.pi*x/b4 ),np.sin( 2*np.pi*x/b4 ),b8*np.cos( 2*np.pi*x/b7 )*(-2*np.pi*x/b7**2) + b9*np.sin( 2*np.pi*x/b7 )*(-2*np.pi*x/b7**2),np.cos( 2*np.pi*x/b7 ),np.sin( 2*np.pi*x/b7 )])


#HIGHER

Bennett5 : b1*(b2+x)**(-1/b3) : np.column_stack([(b2+x)**(-1/b3), b1*(-1/b3)*(b2+x)**((-1/b3)-1),b1*np.log(b2+x)*(b2+x)**(-1/b3)*((1/b3)**2)])

Thurber : (b1 + b2*x + b3*x**2 + b4*x**3)/(1 + b5*x + b6*x**2 + b7*x**3) : np.column_stack([1/(1 + b5*x + b6*x**2 + b7*x**3),x/(1 + b5*x + b6*x**2 + b7*x**3),x**2/(1 + b5*x + b6*x**2 + b7*x**3),x**3/(1 + b5*x + b6*x**2 + b7*x**3),(-x)*(b1 + b2*x + b3*x**2 + b4*x**3)/(1 + b5*x + b6*x**2 + b7*x**3)**2,(-x**2)*(b1 + b2*x + b3*x**2 + b4*x**3)/(1 + b5*x + b6*x**2 + b7*x**3)**2,(-x**3)*(b1 + b2*x + b3*x**2 + b4*x**3)/(1 + b5*x + b6*x**2 + b7*x**3)**2])

BoxBOD : b1*(1-np.exp(-b2*x)) : np.column_stack([1-np.exp(-b2*x),b1*x*np.exp(-b2*x)])

Eckerle4 : (b1/b2) * np.exp(-0.5*((x-b3)/b2)**2) : np.column_stack([(1/b2) * np.exp(-0.5*((x-b3)/b2)**2),(-b1/b2**2) * np.exp(-0.5*((x-b3)/b2)**2) + (b1/b2) * np.exp(-0.5*((x-b3)/b2)**2) * ((x-b3)/b2**3), (b1/b2) * np.exp(-0.5*((x-b3)/b2)**2) * ((x-b3)/b2)])

MGH09 : b1*(x**2+x*b2) / (x**2+x*b3+b4) : np.column_stack([(x**2+x*b2) / (x**2+x*b3+b4), (b1*x*b2) / (x**2+x*b3+b4), ((-1)*b1*(x**2+x*b2) / (x**2+x*b3+b4)**2) * x,(-1)*b1*(x**2+x*b2) / (x**2+x*b3+b4)**2])

MGH10 : b1 * np.exp(b2/(x+b3)) : np.column_stack([np.exp(b2/(x+b3)),b1*np.exp(b2/(x+b3))*(1/(x+b3)), b1 * np.exp(b2/(x+b3)) * (-b2/(x+b3)**2)])

Rat42 : b1 / (1+np.exp(b2-b3*x)) : np.column_stack([1 / (1+np.exp(b2-b3*x)), -b1*np.exp(b2-b3*x) / (1+np.exp(b2-b3*x))**2, b1*np.exp(b2-b3*x)* x / (1+np.exp(b2-b3*x))**2])

Rat43 : b1 / (1+np.exp(b2-b3*x))**(1/b4) : np.column_stack([1 / (1+np.exp(b2-b3*x))**(1/b4), (-1/b4)* b1 * np.exp(b2-b3*x)/ ((1+np.exp(b2-b3*x))**(1/b4 + 1)), (x/b4)* b1 * np.exp(b2-b3*x) / ((1+np.exp(b2-b3*x))**(1/b4 + 1)), (b1/b4**2) * (1+np.exp(b2-b3*x))**(-1/b4) * np.log(1+np.exp(b2-b3*x))])
