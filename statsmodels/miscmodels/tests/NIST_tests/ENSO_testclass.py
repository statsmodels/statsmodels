
#Output from test_generator.py using NIST data and results
#It is advised that no changes are done in this file.
#Any desired modification should be generalised and added
#in test_generator.py
import numpy as np
import statsmodels.api as sm
from statsmodels.miscmodels.nonlinls import NonlinearLS

class funcENSO(NonlinearLS):

    def expr(self, params, exog=None):
        if exog is None:
            x = self.exog
        else:
            x = exog
        b1, b2, b3, b4, b5, b6, b7, b8, b9 = params
        return b1 + b2*np.cos( 2*np.pi*x/12 ) + b3*np.sin( 2*np.pi*x/12 ) + b5*np.cos( 2*np.pi*x/b4 ) + b6*np.sin( 2*np.pi*x/b4 ) + b8*np.cos( 2*np.pi*x/b7 ) + b9*np.sin( 2*np.pi*x/b7 )

class funcENSO_J(NonlinearLS):

    def expr(self, params, exog=None):
        if exog is None:
            x = self.exog
        else:
            x = exog
        b1, b2, b3, b4, b5, b6, b7, b8, b9 = params
        return b1 + b2*np.cos( 2*np.pi*x/12 ) + b3*np.sin( 2*np.pi*x/12 ) + b5*np.cos( 2*np.pi*x/b4 ) + b6*np.sin( 2*np.pi*x/b4 ) + b8*np.cos( 2*np.pi*x/b7 ) + b9*np.sin( 2*np.pi*x/b7 )

    def jacobian(self, params, exog=None):
        if exog is None:
            x = self.exog
        else:
            x = exog
        b1, b2, b3, b4, b5, b6, b7, b8, b9 = params
        return np.column_stack([np.ones(168),np.cos( 2*np.pi*x/12 ),np.sin( 2*np.pi*x/12 ),b5*np.cos( 2*np.pi*x/b4 )*(-2*np.pi*x/b4**2) + b6*np.sin( 2*np.pi*x/b4 )*(-2*np.pi*x/b4**2),np.cos( 2*np.pi*x/b4 ),np.sin( 2*np.pi*x/b4 ),b8*np.cos( 2*np.pi*x/b7 )*(-2*np.pi*x/b7**2) + b9*np.sin( 2*np.pi*x/b7 )*(-2*np.pi*x/b7**2),np.cos( 2*np.pi*x/b7 ),np.sin( 2*np.pi*x/b7 )])

class TestNonlinearLS(object):
    def setup(self):
        x = np.array([1.0,
                   2.0,
                   3.0,
                   4.0,
                   5.0,
                   6.0,
                   7.0,
                   8.0,
                   9.0,
                   10.0,
                   11.0,
                   12.0,
                   13.0,
                   14.0,
                   15.0,
                   16.0,
                   17.0,
                   18.0,
                   19.0,
                   20.0,
                   21.0,
                   22.0,
                   23.0,
                   24.0,
                   25.0,
                   26.0,
                   27.0,
                   28.0,
                   29.0,
                   30.0,
                   31.0,
                   32.0,
                   33.0,
                   34.0,
                   35.0,
                   36.0,
                   37.0,
                   38.0,
                   39.0,
                   40.0,
                   41.0,
                   42.0,
                   43.0,
                   44.0,
                   45.0,
                   46.0,
                   47.0,
                   48.0,
                   49.0,
                   50.0,
                   51.0,
                   52.0,
                   53.0,
                   54.0,
                   55.0,
                   56.0,
                   57.0,
                   58.0,
                   59.0,
                   60.0,
                   61.0,
                   62.0,
                   63.0,
                   64.0,
                   65.0,
                   66.0,
                   67.0,
                   68.0,
                   69.0,
                   70.0,
                   71.0,
                   72.0,
                   73.0,
                   74.0,
                   75.0,
                   76.0,
                   77.0,
                   78.0,
                   79.0,
                   80.0,
                   81.0,
                   82.0,
                   83.0,
                   84.0,
                   85.0,
                   86.0,
                   87.0,
                   88.0,
                   89.0,
                   90.0,
                   91.0,
                   92.0,
                   93.0,
                   94.0,
                   95.0,
                   96.0,
                   97.0,
                   98.0,
                   99.0,
                   100.0,
                   101.0,
                   102.0,
                   103.0,
                   104.0,
                   105.0,
                   106.0,
                   107.0,
                   108.0,
                   109.0,
                   110.0,
                   111.0,
                   112.0,
                   113.0,
                   114.0,
                   115.0,
                   116.0,
                   117.0,
                   118.0,
                   119.0,
                   120.0,
                   121.0,
                   122.0,
                   123.0,
                   124.0,
                   125.0,
                   126.0,
                   127.0,
                   128.0,
                   129.0,
                   130.0,
                   131.0,
                   132.0,
                   133.0,
                   134.0,
                   135.0,
                   136.0,
                   137.0,
                   138.0,
                   139.0,
                   140.0,
                   141.0,
                   142.0,
                   143.0,
                   144.0,
                   145.0,
                   146.0,
                   147.0,
                   148.0,
                   149.0,
                   150.0,
                   151.0,
                   152.0,
                   153.0,
                   154.0,
                   155.0,
                   156.0,
                   157.0,
                   158.0,
                   159.0,
                   160.0,
                   161.0,
                   162.0,
                   163.0,
                   164.0,
                   165.0,
                   166.0,
                   167.0,
                   168.0])
        y = np.array([12.9,
                   11.3,
                   10.6,
                   11.2,
                   10.9,
                   7.5,
                   7.7,
                   11.7,
                   12.9,
                   14.3,
                   10.9,
                   13.7,
                   17.1,
                   14.0,
                   15.3,
                   8.5,
                   5.7,
                   5.5,
                   7.6,
                   8.6,
                   7.3,
                   7.6,
                   12.7,
                   11.0,
                   12.7,
                   12.9,
                   13.0,
                   10.9,
                   10.4,
                   10.2,
                   8.0,
                   10.9,
                   13.6,
                   10.5,
                   9.2,
                   12.4,
                   12.7,
                   13.3,
                   10.1,
                   7.8,
                   4.8,
                   3.0,
                   2.5,
                   6.3,
                   9.7,
                   11.6,
                   8.6,
                   12.4,
                   10.5,
                   13.3,
                   10.4,
                   8.1,
                   3.7,
                   10.7,
                   5.1,
                   10.4,
                   10.9,
                   11.7,
                   11.4,
                   13.7,
                   14.1,
                   14.0,
                   12.5,
                   6.3,
                   9.6,
                   11.7,
                   5.0,
                   10.8,
                   12.7,
                   10.8,
                   11.8,
                   12.6,
                   15.7,
                   12.6,
                   14.8,
                   7.8,
                   7.1,
                   11.2,
                   8.1,
                   6.4,
                   5.2,
                   12.0,
                   10.2,
                   12.7,
                   10.2,
                   14.7,
                   12.2,
                   7.1,
                   5.7,
                   6.7,
                   3.9,
                   8.5,
                   8.3,
                   10.8,
                   16.7,
                   12.6,
                   12.5,
                   12.5,
                   9.8,
                   7.2,
                   4.1,
                   10.6,
                   10.1,
                   10.1,
                   11.9,
                   13.6,
                   16.3,
                   17.6,
                   15.5,
                   16.0,
                   15.2,
                   11.2,
                   14.3,
                   14.5,
                   8.5,
                   12.0,
                   12.7,
                   11.3,
                   14.5,
                   15.1,
                   10.4,
                   11.5,
                   13.4,
                   7.5,
                   0.6,
                   0.3,
                   5.5,
                   5.0,
                   4.6,
                   8.2,
                   9.9,
                   9.2,
                   12.5,
                   10.9,
                   9.9,
                   8.9,
                   7.6,
                   9.5,
                   8.4,
                   10.7,
                   13.6,
                   13.7,
                   13.7,
                   16.5,
                   16.8,
                   17.1,
                   15.4,
                   9.5,
                   6.1,
                   10.1,
                   9.3,
                   5.3,
                   11.2,
                   16.6,
                   15.6,
                   12.0,
                   11.5,
                   8.6,
                   13.8,
                   8.7,
                   8.6,
                   8.6,
                   8.7,
                   12.8,
                   13.2,
                   14.0,
                   13.4,
                   14.8])
        self.Degrees_free=159
        self.Res_stddev=2.2269642403
        self.Res_sum_squares=788.53978668
        self.start_value2=[10.0, 3.0, 0.5, 44.0, -1.5, 0.5, 26.0, -0.1, 1.5]
        self.Cert_parameters=[10.510749193, 3.0762128085, 0.53280138227, 44.3110887, -1.6231428586, 0.52554493756, 26.88761444, 0.21232288488, 1.4966870418]
        self.start_value1=[11.0, 3.0, 0.5, 40.0, -0.7, -1.3, 25.0, -0.3, 1.4]
        self.Cert_stddev=[0.17488832467, 0.24310052139, 0.24354686618, 0.94408025976, 0.28078369611, 0.48073701119, 0.4161293913, 0.51460022911, 0.25434468893]
        self.Nobs_data=168
        self.nparams=9

        mod1 = funcENSO(y, x)
        self.res_start1 = mod1.fit(self.start_value1)
        mod2 = funcENSO(y, x)
        self.res_start2 = mod2.fit(self.start_value2)
        mod1_J = funcENSO_J(y, x)
        self.resJ_start1 = mod1_J.fit(self.start_value1)
        mod2_J = funcENSO_J(y, x)
        self.resJ_start2 = mod2_J.fit(self.start_value2)
