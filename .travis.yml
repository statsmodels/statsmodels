# Travis script that uses miniconda in place of the system installed python
# versions.  Allows substantial flexability for choosing versions of
# required packages and is simpler to use to test up-to-date scientific Python
# stack
language: python
sudo: required


env:
  # Default values for common packages, override as needed
  global:
    - OPTIONAL=
    - COVERAGE=false
    - USEMPL=true
    - MATPLOTLIB=
    - DOCBUILD=false

matrix:
  fast_finish: true
  include:
  - python: 2.7
    env:
    - PYTHON=2.7
    - NUMPY=1.11
    - PANDAS=0.19
    - MATPLOTLIB=1.5
    - COVERAGE=true
  - python: 2.7
    env:
    - PYTHON=2.7
    - NUMPY=1.9
    - SCIPY=0.15
    - PANDAS=0.15
    - USEMPL=false
    - OPTIONAL="libgfortran=1.0"
  - python: 2.7
    env:
    - PYTHON=3.3
    - NUMPY=1.9
    - SCIPY=0.14
    - MATPLOTLIB=1.4
    - PANDAS=0.14
  - python: 2.7
    env:
    - PYTHON=3.4
    - NUMPY=1.10
    - SCIPY=0.16
    - PANDAS=0.16
    - MATPLOTLIB=1.4
    - OPTIONAL="libgfortran=1.0"
  - python: 2.7
    env:
    - PYTHON=3.5
    - NUMPY=1.10
    - SCIPY=0.17
    - PANDAS=0.18
    - MATPLOTLIB=1.5
  - python: 2.7
    env:
    - PYTHON=3.6
    - COVERAGE=true
  - python: 2.7
    env:
    - PYTHON=3.6
    - DOCBUILD=true

notifications:
  email:
    on_success: always

# Setup anaconda
before_install:
  - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
  - chmod +x miniconda.sh
  - ./miniconda.sh -b
  - export PATH=/home/travis/miniconda/bin:$PATH
  - export PATH=/home/travis/miniconda2/bin:$PATH
  - conda config --set always_yes yes
  - conda update --quiet conda
  # Fix for headless TravisCI
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  # Avoid noise from matplotlib
  - mkdir -p $HOME/.config/matplotlib
  - SRCDIR=$PWD
  # Build package list to avoid empty package=versions; only needed for versioned packages
  - PKGS="python=${PYTHON}"
  - PKGS="${PKGS} numpy"; if [ ${NUMPY} ]; then PKGS="${PKGS}=${NUMPY}"; fi
  - PKGS="${PKGS} scipy"; if [ ${SCIPY} ]; then PKGS="${PKGS}=${SCIPY}"; fi
  - PKGS="${PKGS} patsy"; if [ ${PATSY} ]; then PKGS="${PKGS}=${PATSY}"; fi
  - PKGS="${PKGS} pandas"; if [ ${PANDAS} ]; then PKGS="${PKGS}=${PANDAS}"; fi
  - PKGS="${PKGS} Cython"; if [ ${CYTHON} ]; then PKGS="${PKGS}=${CYTHON}"; fi
  - if [ ${USEMPL} = true ]; then PKGS="${PKGS} matplotlib"; if [ ${MATPLOTLIB} ]; then PKGS="${PKGS}=${MATPLOTLIB}"; fi; fi
  - conda create --yes --quiet -n statsmodels-test ${PKGS} ${OPTIONAL} nose pip pyyaml setuptools
  - source activate statsmodels-test
  - if [ ${COVERAGE} = true ]; then pip install coverage coveralls; fi
  - if [ ${DOCBUILD} = true ]; then bash tools/ci_docbuild_install.sh; fi;

# Install packages
install:
  - python setup.py develop

script:
  - export SRCDIR=$PWD
  - if [ ${DOCBUILD} = true ]; then cd ${SRCDIR}/docs; bash ${SRCDIR}/tools/ci_docbuild.sh; exit 0; fi;
  - mkdir -p "${SRCDIR}/travis-test"; cd "${SRCDIR}/travis-test"
  # Show versions
  - python -c 'import statsmodels.api as sm; sm.show_versions();'
  # Compose a script to run testing with coverage
  - echo 'import statsmodels as sm; a=sm.test(label="full", verbose=3); import sys; sys.exit((len(a.failures)+len(a.errors))>0)' > test.py
  - if [ ${COVERAGE} = true ]; then coverage run --rcfile=${SRCDIR}/.travis_coveragerc test.py; else python test.py; fi

after_success:
  # Coverage only for 2.7
  - if [ ${COVERAGE} = true ]; then coveralls --rcfile=${SRCDIR}/.travis_coveragerc; fi
