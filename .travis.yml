# Travis script that uses miniconda in place of the system installed python
# versions.  Allows substantial flexability for choosing versions of
# required packages and is simpler to use to test up-to-date scientific Python
# stack
language: python
sudo: required

services:
    - docker

before_install:
    - docker pull ubuntu:14.04

env:
  # Default values for common packages, override as needed
  global:
    - OPTIONAL=
    - COVERAGE=false
    - USEMPL=true

matrix:
  fast_finish: true
  include:
  - python: 2.7
    env:
    - PYTHON=2.7
  - python: 2.7
    env:
    - PYTHON=3.5

notifications:
  email:
    on_success: always

# Setup anaconda
before_install:
  - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
  - chmod +x miniconda.sh
  - ./miniconda.sh -b
  - export PATH=/home/travis/miniconda/bin:$PATH
  - export PATH=/home/travis/miniconda2/bin:$PATH
  - conda update --yes --quiet conda
  # Fix for headless TravisCI
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  # Avoid noise from matplotlib
  - mkdir $HOME/.config
  - mkdir $HOME/.config/matplotlib

# Install packages
install:
  - conda create --yes --quiet -n statsmodels-test python=${PYTHON} cython patsy pyyaml nose
  - source activate statsmodels-test
  - conda remove numpy --yes
  - pip install numpy
  - pip install scipy
  - pip install pandas
  - python setup.py install

script:
  - export SRCDIR=$PWD
  - mkdir -p "${SRCDIR}/travis-test"; cd "${SRCDIR}/travis-test"
  # Show versions
  - python -c 'import statsmodels.api as sm; sm.show_versions();'
  # Compose a script to run testing with coverage
  - echo 'import statsmodels as sm; a=sm.test(label="full", verbose=3); import sys; sys.exit((len(a.failures)+len(a.errors))>0)' > test.py
  - if [ ${COVERAGE} = true ]; then coverage run --rcfile=${SRCDIR}/.travis_coveragerc test.py; else python test.py; fi
