# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

parameters:
  # defaults for any parameters that are not specified
  name: ''
  vmImage: ''


jobs:

- job: ${{ parameters.name }}Test
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
      pip install pytest-xdist
    displayName: 'Install dependencies'

  - script: |
      python setup.py build_ext --inplace -q
    displayName: 'Build Cython Extensions'

  - script: |
      pytest statsmodels --junitxml=junit/test-results.xml --skip-examples -n 2
    displayName: 'pytest'

  - ${{ if eq(parameters.name, 'Linux') }}:
    # Only lint on Linux
    - script: |
        LINT=true ./lint.sh
      displayName: 'Checking code format (linting)'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

- job: ${{ parameters.name }}Publish
  dependsOn: ${{ parameters.name }}Test
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'
