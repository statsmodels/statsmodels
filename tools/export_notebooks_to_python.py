#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import glob
import os
import textwrap

import nbconvert
from yapf.yapflib.yapf_api import FormatCode

BASE_PATH = os.path.split(os.path.abspath(__file__))[0]
DO_NOT_EDIT = """
# DO NOT EDIT 
# Autogenerated from the notebook {notebook}. 
# Edit the notebook and then sync the output with this file.
# DO NOT EDIT 
"""
parser = argparse.ArgumentParser(description="""
Sync notebooks to python by exporting. The exported files are
always written in ../python relative to the notebooks. 
Requires nbconvert and yapf.
""")
parser.add_argument("--full-path", type=str, default=None,
                    help="Full Path to notebook to convert. Converts all "
                         "notebooks in `directory` by default. If not "
                         "specified, assumes examples are located "
                         "in ../examples/notebooks.")


def main():
    args = parser.parse_args()
    full_path = args.full_path
    if full_path is None:
        full_path = os.path.join(BASE_PATH, '..', 'examples', 'notebooks')
    notebooks = glob.glob(os.path.join(full_path, '*.ipynb'))
    if not notebooks:
        import warnings
        warnings.warn('No notebooks found', UserWarning)
    for nb in notebooks:
        with open(nb, 'r') as nb_file:
            converter = nbconvert.PythonExporter()
            python = converter.from_file(nb_file)
            nb_full_name = os.path.split(nb)[1]
            nb_name = os.path.splitext(nb_full_name)[0]
            py_name = nb_name + '.py'
            # Get base directory to notebook
            out_file = os.path.split(nb)[0]
            # Write to ../python
            out_file = os.path.join(out_file, '..', 'python', py_name)
            code = python[0].split('\n')
            code_out = []
            for i, block in enumerate(code):
                if 'get_ipython' in block:
                    continue
                elif block.startswith('# In[ ]:'):
                    continue
                if block.startswith('#'):
                    # Wrap comments from Markdown
                    block = textwrap.fill(block, width=74)
                    block = block.replace('\n', '\n# ')
                code_out.append(block)
            if not code_out[0]:
                code_out = code_out[1:]
            loc = 0
            if 'coding' in code_out[0]:
                loc = 1
            code_out.insert(loc, DO_NOT_EDIT.format(notebook=nb_full_name))
            code_out = '\n'.join(code_out)
            code_out, success = FormatCode(code_out, style_config='pep8')
            with open(out_file, 'w') as of:
                of.write(code_out)


if __name__ == '__main__':
    main()
